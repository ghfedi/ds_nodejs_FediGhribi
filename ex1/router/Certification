const router = require('express').Router();
const auth = require('../middlewares/auth');
const authoris = require('../middlewares/authoris');
const { Certification, validation_Certification } = require('../models/Certification');

router.post('', [auth, authoris], async (req, res) => {
    try {
        let result_valid = validation_Certification.validate(req.body);
        if (result_valid.error)
            return res.status(400).send(result_valid.error.details[0].message);

        let certif = new Certification(req.body);
        certif = await certif.save();
        res.status(201).send(certif);
    } catch (error) {
        res.status(400).send('Problem saving Certification : ' + error.message)
    }

});

// get certifications by first letter 
router.get('/:firstletter', auth, async (req, res) => {
    try {
    let Certifs = await Certification
    .find({ name: new RegExp('^' + req.params.firstletter, 'i') });
    res.send(Certifs);
    } catch (error) {
    res.status(400).send('Cant get Certifs : ' + error.message)
    }

});


// get all Certifications
router.get('', auth, async (req, res) => {
    try {

        let Certifications = await Certification.find();
        res.send(Certifications);
    } catch (error) {
    res.status(400).send('Cant get Certifications : ' + error.message)
    }
});



// update 
router.put('/:id', [auth, authoris], async (req, res) => {
    // Validation new data 
    let result_valid = validation_Certification.validate(req.body);
    if (result_valid.error)
        return res.status(400).send(result_valid.error.details[0].message);

    //update
    await Certification.updateOne({ _id: req.params.id }, req.body);
    res.send(await Certification.findById(req.params.id));
});


// delete certification
router.delete('/:id', [auth, authoris], async (req, res) => {
    
    let Certification = await Certification.findByIdAndRemove(req.params.id);
    if (!Certification)
        return res.status(404).send('Cetification id is not found');
    res.send(Certification);
});

module.exports = router;